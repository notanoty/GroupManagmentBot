services:
#  api:
#    image: docker-spring-boot-postgres:latest
#    env_file:
#      - .env
#    build:
#      context: ./
#    ports:
#      - '8080:8080'
#    depends_on:
#      - db
#    environment:
#      POSTGRES_DATASOURCE: ${POSTGRES_DATASOURCE}
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      POSTGRES_DATABASE: ${POSTGRES_DATABASE}

  db:
    image: postgres:17
    env_file:
      - .env
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/views.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    ports:
      - '${POSTGRES_PORT}:5432'
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', '${POSTGRES_USER}']
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      org.springframework.boot.service-connection: db
  db-old:
    image: postgres:17
    env_file:
      - .env
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: "postgres"
      POSTGRES_PORT: 5433  # Optional, doesn't always work
      PGPORT: 5433  # Helps some clients recognize the port
    command: ["postgres", "-p", "5433"]  # Explicitly tell PostgreSQL to listen on port 5433
    ports:
      - "5433:5433"  # Ensure both container and host use 5433

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    ports:
      - '8888:80'
    environment:
      PGADMIN_DEFAULT_EMAIL: user-name@domain-name.com
      PGADMIN_DEFAULT_PASSWORD: strong-password
    volumes:
      - pgadmin-data:/var/lib/pgadmin

volumes:
  postgres-data:
  pgadmin-data:
